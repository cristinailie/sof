#
# Volume capture with Highpass EQ IIR pipeline
#
# Pipeline with a highpass IIR filter. All attributes defined herein are namespaced by alsatplg to
# "pipeline-highpass-capture.attribute_name"
#
# Usage: this component can be used by declaring in the top-level topology conf file as follows:
#
# 	Object.pipeline-highpass-capture."N.M" {
#		pcm_name	"Headset"
#		format		"s16le"
#		period		1000
#		time_domain	"timer"
#		channels	2
#		rate		48000
#	}
#
# Where N and M are unique integers for pipeline ID and PCM ID in the parent object.
#
<include/common/tokens.conf>
<include/platform/intel/bxt.conf>
<include/components/volume.conf>
<include/components/eq-iir.conf>
<include/components/buffer.conf>
<include/components/host.conf>
<include/components/pipeline.conf>
<include/controls/bytes.conf>
<include/common/pcm.conf>
<include/common/data.conf>
<include/common/pcm_caps.conf>

#
#
# (source) host.N.capture <- buffer.N.0 <- volume.N.0 <- buffer.N.1 <- eqiir.N.0 <- buffer.N.2 (sink endpoint)
#
Class.Pipeline."pipeline-highpass-capture" {

	@args."pipeline_id" {
		type "integer"
	}

	@args."pcm_id" {
		type "integer"
	}

	<include/pipelines/pipeline-volume.conf>
	DefineAttribute."volume_ctl_name" {}
	DefineAttribute."eqiir_filter" {}

	attributes {
		mandatory [
			"channels"
			"format"
			"rate"
			"direction"
			"period"
			"time_domain"
			"pcm_name"
			"volume_ctl_name"
		]
		immutable [
			"direction"
		]
	}

	pipeline."$pipeline_id" {
		period		"$period"
		time_domain	"$time_domain"
		core		0
		frames		0
		priority	0
		mips		5000
	}

	# Pipeline objects
	host."$pipeline_id.capture" {
		period_sink_count	0
		period_source_count	2
		widget_type		"aif_out"
	}

	buffer."$pipeline_id.0" {
		periods	2
		channels	"$channels"
		caps		"host"
	}

	pga."$pipeline_id.0" {
		format		"$format"
		volume_ctl_name "$volume_ctl_name"
	}

	buffer."$pipeline_id.1" {
		periods	2
		channels	"$channels"
		caps		"host"
	}

	eqiir."$pipeline_id.0" {
		format		"$format"
		eqiir_filter	"$eqiir_filter"

		# byte control for EQ IIR
		bytes."eqiir.$pipeline_id.0" {
			max	1024
			data_name	"$eqiir_filter"

			data."$data_name" {}

			access [
				tlv_write
				tlv_read
				tlv_callback
			]
		}
	}

	buffer."$pipeline_id.2" {
		periods	2
		channels	"$channels"
		caps		"dai"
	}

	# PCM
	pcm."$pcm_name.capture.$pcm_id" {}

	# PCM Capabilities
	pcm_caps."$pcm_name.capture.$pcm_id" {}

	# Endpoint definitions
	endpoint."source.pipeline.$pipeline_id.0" {
		widget	"buffer.$pipeline_id.2"
	}

	# Pipeline connections
	connection."graph.$pipeline_id.0" {
		sink	"host.$pipeline_id.capture"
		source	"buffer.$pipeline_id.0"
	}

	connection."graph.$pipeline_id.1" {
		sink	"buffer.$pipeline_id.0"
		source	"pga.$pipeline_id.0"
	}

	connection."graph.$pipeline_id.2" {
		sink "pga.$pipeline_id.0"
		source	"buffer.$pipeline_id.1"
	}

	connection."graph.$pipeline_id.3" {
		sink	"buffer.$pipeline_id.1"
		source	"eqiir.$pipeline_id.0"
	}

	connection."graph.$pipeline_id.4" {
		sink	"eqiir.$pipeline_id.0"
		source	"buffer.$pipeline_id.2"
	}

	direction 	"capture"
	time_domain	"timer"
	period		1000
}
