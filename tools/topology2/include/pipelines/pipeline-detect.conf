#
# Pipeline with detect and channel selector
#
# All attributes defined herein are namespaced by alsatplg to
# "pipeline-detect.attribute_name"
#
# Usage: this component can be used by declaring in the top-level topology conf file as follows:
#
# 	Object.pipeline-detect."N" {
#		format		"s16le"
#		period		1000
#		time_domain	"timer"
#		channels	2
#		rate		16000
#	}
#
# Where N is a unique integer for pipeline ID
#
<include/components/buffer.conf>
<include/components/selector.conf>
<include/components/pipeline.conf>
<include/components/virtual_widget.conf>

#
# (source) buffer.N.1 -> selector.N.0 ->  buffer.N.0 -> detect.N.playback (sink)
#
Class.Pipeline."pipeline-detect" {

	@args."pipeline_id" {
		type "integer"
	}

	<include/pipelines/pipeline-volume.conf>

	DefineAttribute."stream_name" {}
	DefineAttribute."detect_sink_name" {}

	# Class type for the detect component.
	DefineAttribute."detect_object_class" {}
	DefineAttribute."detect_config" {}
	DefineAttribute."detect_model" {}

	attributes {
		mandatory [
			"channels"
			"format"
			"rate"
			"period"
			"direction"
			"time_domain"
			"stream_name"
		]
		immutable [
			"direction"
		]
	}

	pipeline."$pipeline_id" {
		period		"$period"
		time_domain	"$time_domain"
		core		0
		frames		0
		priority	1
		mips		100000
	}

	virtual_widget."$detect_sink_name" {
		widget_type	"out_drv"
	}


	# Pipeline objects
	$detect_object_class."$pipeline_id.0" {
		stream_name	"$stream_name"
		detect_config	"$detect_config"
		detect_model	"$detect_model"

		# trapping PRE/POST_PMU/PMD events
		event_flags	15
		# 1 for DAPM event for detect component
		event_type	1

		# byte control for Detect config
		bytes."detect_config.$pipeline_id.0" {
			max	304
			data_name	"$detect_config"

			access [
				tlv_write
				tlv_read
				tlv_callback
			]

			data."$data_name" {}
		}

		# byte control for Detect model
		bytes."detect_model.$pipeline_id.0" {
			max	300000
			data_name	"$detect_model"

			access [
				tlv_write
				tlv_read
				tlv_callback
			]

			data."$data_name" {}
		}
	}

	buffer."$pipeline_id.0" {
		periods	2
		caps		"comp"
		channels	"$channels"
	}

	selector."$pipeline_id.0" {
		format			"$format"

		# byte control for selector
		bytes."selector.$pipeline_id.0" {
			max	304

			access [
				tlv_write
				tlv_read
				tlv_callback
			]

			data."selector" {
				bytes "0x53,0x4f,0x46,0x00,0x00,0x00,0x00,0x00,
					0x0c,0x00,0x00,0x00,0x00,0x10,0x00,0x03,
					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
					0x00,0x00,0x00,0x00"
			}
		}
	}

	buffer."$pipeline_id.1" {
		periods	2
		channels	"$channels"
		caps		"comp"
	}

	# Endpoint definitions
	endpoint."source.pipeline.$pipeline_id.0" {
		widget	"buffer.$pipeline_id.1"
	}

	# Endpoint definitions
	endpoint."sink.pipeline.$pipeline_id.0" {
		widget	"$detect_sink_name"
	}

	# Pipeline connections
	connection."graph.$pipeline_id.0" {
		sink "selector.$pipeline_id.0"
		source	"buffer.$pipeline_id.1"
	}

	connection."graph.$pipeline_id.1" {
		sink	"buffer.$pipeline_id.0"
		source	"selector.$pipeline_id.0"
	}

	connection."graph.$pipeline_id.2" {
		sink	"$detect_object_class.$pipeline_id.0"
		source	"buffer.$pipeline_id.0"
	}

	connection."graph.$pipeline_id.3" {
		source	"$detect_object_class.$pipeline_id.0"
		sink	"$detect_sink_name"
	}

	direction	"capture"
	time_domain	"timer"
}
